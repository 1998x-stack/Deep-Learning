structure = {
    "1_应用数学与机器学习基础": {
        "2_线性代数": [
            "标量、向量、矩阵和张量",
            "矩阵和向量相乘",
            "单位矩阵和逆矩阵",
            "线性相关和生成子空间",
            "范数",
            "特殊类型的矩阵和向量",
            "特征分解",
            "奇异值分解",
            "Moore-Penrose 伪逆",
            "迹运算",
            "行列式",
            "实例：主成分分析"
        ],
        "3_概率与信息论": [
            "为什么要使用概率",
            "随机变量",
            "概率分布",
            "离散型变量和概率质量函数",
            "连续型变量和概率密度函数",
            "边缘概率",
            "条件概率",
            "条件概率的链式法则",
            "独立性和条件独立性",
            "期望、方差和协方差",
            "常用概率分布",
            "Bernoulli 分布",
            "Multinoulli 分布",
            "高斯分布",
            "指数分布和 Laplace 分布",
            "Dirac 分布和经验分布",
            "分布的混合",
            "常用函数的有用性质",
            "贝叶斯规则",
            "连续型变量的技术细节",
            "信息论",
            "结构化概率模型"
        ],
        "4_数值计算": [
            "上溢和下溢",
            "病态条件",
            "基于梯度的优化方法",
            "梯度之上：Jacobian 和 Hessian 矩阵",
            "约束优化",
            "实例：线性最小二乘"
        ],
        "5_机器学习基础": [
            "学习算法",
            "任务 T",
            "性能度量 P",
            "经验 E",
            "示例：线性回归",
            "容量、过拟合和欠拟合",
            "没有免费午餐定理",
            "正则化",
            "超参数和验证集",
            "交叉验证",
            "估计、偏差和方差",
            "点估计",
            "偏差",
            "方差和标准差",
            "权衡偏差和方差以最小化均方误差",
            "一致性",
            "最大似然估计",
            "条件对数似然和均方误差",
            "最大似然的性质",
            "贝叶斯统计",
            "最大后验 (MAP) 估计",
            "监督学习算法",
            "概率监督学习",
            "支持向量机",
            "其他简单的监督学习算法",
            "无监督学习算法",
            "主成分分析",
            "k-均值聚类",
            "随机梯度下降",
            "构建机器学习算法",
            "促使深度学习发展的挑战",
            "维数灾难",
            "局部不变性和平滑正则化",
            "流形学习"
        ]
    },
    "2_深度网络：现代实践": {
        "6_深度前馈网络": [
            "实例：学习 XOR",
            "基于梯度的学习",
            "代价函数",
            "使用最大似然学习条件分布",
            "学习条件统计量",
            "输出单元",
            "用于高斯输出分布的线性单元",
            "用于 Bernoulli 输出分布的 sigmoid 单元",
            "用于 Multinoulli 输出分布的 softmax 单元",
            "其他的输出类型",
            "架构设计",
            "万能近似性质和深度",
            "其他架构上的考虑",
            "反向传播和其他的微分算法",
            "计算图",
            "微积分中的链式法则",
            "递归地使用链式法则来实现反向传播",
            "全连接 MLP 中的反向传播计算",
            "符号到符号的导数",
            "一般化的反向传播",
            "实例：用于 MLP 训练的反向传播",
            "复杂化",
            "深度学习界以外的微分",
            "高阶微分",
            "历史小记"
        ],
        "7_深度学习中的正则化": [
            "参数范数惩罚",
            "L2 参数正则化",
            "L1 参数正则化",
            "作为约束的范数惩罚",
            "正则化和欠约束问题",
            "数据集增强",
            "噪声鲁棒性",
            "向输出目标注入噪声",
            "半监督学习",
            "多任务学习",
            "提前终止",
            "参数绑定和参数共享",
            "卷积神经网络",
            "稀疏表示",
            "Bagging 和其他集成方法",
            "Dropout",
            "对抗训练",
            "切面距离、正切传播和流形正切分类器"
        ],
        "8_深度模型中的优化": [
            "学习和纯优化有什么不同",
            "经验风险最小化",
            "代理损失函数和提前终止",
            "批量算法和小批量算法",
            "神经网络优化中的挑战",
            "病态",
            "局部极小值",
            "高原、鞍点和其他平坦区域",
            "悬崖和梯度爆炸",
            "长期依赖",
            "非精确梯度",
            "局部和全局结构间的弱对应",
            "优化的理论限制",
            "基本算法",
            "随机梯度下降",
            "动量",
            "Nesterov 动量",
            "优化策略和元算法",
            "批标准化",
            "坐标下降",
            "Polyak 平均",
            "监督预训练",
            "设计有助于优化的模型",
            "延拓法和课程学习"
        ],
        "9_卷积网络": [
            "卷积运算",
            "动机",
            "池化",
            "卷积与池化作为一种无限强的先验",
            "基本卷积函数的变体",
            "结构化输出",
            "数据类型",
            "高效的卷积算法",
            "随机或无监督的特征",
            "卷积网络的神经科学基础",
            "卷积网络与深度学习的历史"
        ],
        "10_序列建模：循环和递归网络": [
            "展开计算图",
            "循环神经网络",
            "双向 RNN",
            "基于编码-解码的序列到序列架构",
            "深度循环网络",
            "递归神经网络",
            "长期依赖的挑战",
            "回声状态网络",
            "渗漏单元和其他多时间尺度的策略",
            "时间维度的跳跃连接",
            "长短期记忆和其他门控 RNN",
            "优化长期依赖",
            "外显记忆"
        ],
        "11_实践方法论": [
            "性能度量",
            "默认的基准模型",
            "决定是否收集更多数据",
            "选择超参数",
            "手动调整超参数",
            "自动超参数优化算法",
            "网格搜索",
            "随机搜索",
            "基于模型的超参数优化",
            "调试策略",
            "示例：多位数字识别"
        ],
        "12_应用": [
            "大规模深度学习",
            "快速的 CPU 实现",
            "GPU 实现",
            "大规模的分布式实现",
            "模型压缩",
            "动态结构",
            "深度网络的专用硬件实现",
            "计算机视觉",
            "预处理",
            "对比度归一化",
            "数据集增强",
            "语音识别",
            "自然语言处理",
            "n-gram",
            "神经语言模型",
            "高维输出",
            "使用短列表",
            "分层 Softmax",
            "重要采样",
            "噪声对比估计和排名损失",
            "结合 n-gram 和神经语言模型",
            "神经机器翻译",
            "使用注意力机制并对齐数据片段",
            "历史展望",
            "其他应用",
            "推荐系统",
            "探索与利用",
            "知识表示、推理和回答",
            "知识、联系和回答"
        ]
    },
    "3_深度学习研究": {
        "13_线性因子模型": [
            "概率 PCA 和因子分析",
            "独立成分分析",
            "慢特征分析",
            "稀疏编码",
            "PCA 的流形解释"
        ],
        "14_自编码器": [
            "欠完备自编码器",
            "正则自编码器",
            "稀疏自编码器",
            "去噪自编码器",
            "惩罚导数作为正则",
            "表示能力、层的大小和深度",
            "随机编码器和解码器",
            "去噪自编码器",
            "得分估计",
            "历史展望",
            "使用自编码器学习流形",
            "收缩自编码器",
            "预测稀疏分解",
            "自编码器的应用"
        ],
        "15_表示学习": [
            "贪心逐层无监督预训练",
            "何时以及为何无监督预训练有效",
            "迁移学习和领域自适应",
            "半监督解释因果关系",
            "分布式表示",
            "得益于深度的指数增益",
            "提供发现潜在原因的线索"
        ],
        "16_深度学习中的结构化概率模型": [
            "非结构化建模的挑战",
            "使用图描述模型结构",
            "有向模型",
            "无向模型",
            "配分函数",
            "基于能量的模型",
            "分离和 d-分离",
            "在有向模型和无向模型中转换",
            "因子图",
            "从图模型中采样",
            "结构化建模的优势",
            "学习依赖关系",
            "推断和近似推断",
            "结构化概率模型的深度学习方法",
            "实例：受限玻尔兹曼机"
        ],
        "17_蒙特卡罗方法": [
            "采样和蒙特卡罗方法",
            "为什么需要采样",
            "蒙特卡罗采样的基础",
            "重要采样",
            "马尔可夫链蒙特卡罗方法",
            "Gibbs 采样",
            "不同的峰值之间的混合挑战",
            "不同峰值之间通过回火来混合",
            "深度也许会有助于混合"
        ],
        "18_直面配分函数": [
            "对数似然梯度",
            "随机最大似然和对比散度",
            "伪似然",
            "得分匹配和比率匹配",
            "去噪得分匹配",
            "噪声对比估计",
            "估计配分函数",
            "退火重要采样",
            "桥式采样"
        ],
        "19_近似推断": [
            "把推断视作优化问题",
            "期望最大化",
            "最大后验推断和稀疏编码",
            "变分推断和变分学习",
            "离散型潜变量",
            "变分法",
            "连续型潜变量",
            "学习和推断之间的相互作用",
            "学成近似推断",
            "醒眠算法",
            "学成推断的其他形式"
        ],
        "20_深度生成模型": [
            "玻尔兹曼机",
            "受限玻尔兹曼机",
            "条件分布",
            "训练受限玻尔兹曼机",
            "深度信念网络",
            "深度玻尔兹曼机",
            "有趣的性质",
            "DBM 均匀场推断",
            "DBM 的参数学习",
            "逐层预训练",
            "联合训练深度玻尔兹曼机",
            "实值数据上的玻尔兹曼机",
            "Gaussian-Bernoulli RBM",
            "条件协方差的无向模型",
            "卷积玻尔兹曼机",
            "用于结构化或序列输出的玻尔兹曼机",
            "其他玻尔兹曼机",
            "通过随机操作的反向传播",
            "通过离散随机操作的反向传播",
            "有向生成网络",
            "sigmoid 信念网络",
            "可微生成器网络",
            "变分自编码器",
            "生成式对抗网络",
            "生成矩匹配网络",
            "卷积生成网络",
            "自回归网络",
            "线性自回归网络",
            "神经自回归网络",
            "NADE",
            "从自编码器采样",
            "与任意去噪自编码器相关的马尔可夫链",
            "夹合与条件采样",
            "回退训练过程",
            "生成随机网络",
            "判别性 GSN",
            "其他生成方案",
            "评估生成模型",
            "结论"
        ]
    },
    "4_参考文献": [],
    "5_术语": []
}
import os
import json
from typing import Union, Dict, List, Any
def create_directories_and_files(
    base_path: str, 
    structure: Dict[str, Any], 
    readme_file, 
    parent_path: str = "", 
    level: int = 1
):
    
    """
        根据给定的目录结构创建目录和文件，并生成 README.md 文件。
        Args:
            base_path (str): 根目录路径。
            structure (Dict[str, Any]): 目录结构的嵌套字典。
            readme_file (File): 用于写入README内容的文件对象。
            parent_path (str): 父目录路径。
            level (int): 目录的层级，用于确定 README 标题级别。
        Returns:
            None
        
    """
    heading = "#" * level
    for key, value in structure.items():
        current_path = os.path.join(base_path, key.replace(" ", "_").replace("-", "_"))
        # 创建目录
        os.makedirs(current_path, exist_ok=True)
        # 在README中添加章节标题
        if parent_path:
            readme_file.write(f"{heading} {parent_path}/{key}\n\n")
        else:
            readme_file.write(f"{heading} {key}\n\n")
        # 递归调用创建子目录和文件
        if isinstance(value, dict) and value:
            create_directories_and_files(
                current_path, 
                value, 
                readme_file, 
                parent_path + "/" + key if parent_path else key, 
                level + 1
            )
        elif isinstance(value, list):
            for idx, item in enumerate(value):
                item = f"{idx:02d}_{item}"
                file_name = item.replace(" ", "_").replace("-", "_") + ".py"
                file_path = os.path.join(current_path, file_name)
                with open(file_path, 'w', encoding='utf-8') as file:
                    file.write(f"# {item}\n\n")
                    file.write(f'"""\n\nLecture: {parent_path}/{key}\nContent: {item}\n\n"""\n\n')
                # 在README中添加文件链接
                item_clean = item.replace(" ", "_").replace("-", "_")
                parent_clean = parent_path.replace(" ", "_").replace("-", "_")
                key_clean = key.replace(" ", "_").replace("-", "_")
                readme_file.write(f"- [{item}](./{parent_clean}/{key_clean}/{item_clean}.py)\n")
        else:
            # 创建文件并写入初始内容
            file_name = key.replace(" ", "_").replace("-", "_") + ".py"
            file_path = os.path.join(current_path, file_name)
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(f"# {key}\n\n")
                file.write(f'"""\nLecture: {parent_path}/{key}\nContent: {key}\n"""\n\n')
            # 在README中添加文件链接
            parent_clean = parent_path.replace(" ", "_").replace("-", "_")
            key_clean = key.replace(" ", "_").replace("-", "_")
            readme_file.write(f"- [{key}](./{parent_clean}/{key_clean}/{file_name})\n")
        # 添加空行以分隔不同的章节
        readme_file.write("\n")
def main():
    root_dir = './'
    # 创建根目录
    os.makedirs(root_dir, exist_ok=True)
    # 创建 README.md 文件
    with open(os.path.join(root_dir, "README.md"), 'w', encoding='utf-8') as readme_file:
        readme_file.write("# 深度学习\n\n")
        readme_file.write("这是一个关于深度学习的目录结构。\n\n")
        create_directories_and_files(root_dir, structure, readme_file)
    print("目录和文件结构已生成，并创建 README.md 文件。")
if __name__ == "__main__":
    main()
